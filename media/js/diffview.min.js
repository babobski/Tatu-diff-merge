let dmp=new diff_match_patch;diffview={buildView:params=>{let baseTextLines=params.baseTextLines,newTextLines=params.newTextLines,opcodes=params.opcodes,highlight=params.highlight,baseTextName=params.baseTextName?params.baseTextName:"Base Text",newTextName=params.newTextName?params.newTextName:"New Text",contextSize=params.contextSize,inserted=0,deleted=0,changed=0,leftInSublang=!1,rightInSublang=!1,language=params.language,usesSubLang=params.usesSubLang,leftSubLang="",rightSubLang="",leftInHTML=!1,rightInHTML=!1,insertC=document.getElementById("insertCount"),deletedC=document.getElementById("deletedCount"),changedC=document.getElementById("changedCount");if(null==baseTextLines)throw"Cannot build diff view; baseTextLines is not defined.";if(null==newTextLines)throw"Cannot build diff view; newTextLines is not defined.";if(!opcodes)throw"Cannot build diff view; opcodes is not defined.";let celt=(name,clazz,id=!1)=>{let e=document.createElement(name);return e.className=clazz,id&&(e.id=id),e},telt=(name,text,clazz="")=>{let e=document.createElement(name);return e.appendChild(document.createTextNode(text)),e},ctelt=(name,clazz,text,cleanText="",last)=>{let e=document.createElement(name),result,reset=!1;if(e.className=clazz,highlight&&"texttitle"!==clazz){usesSubLang&&(result=checkForSubLang(text,language,last),result.found&&("inlinephp"===result.language?(reset=!0,last?rightSubLang="php":leftSubLang="php"):last?rightSubLang=result.language:leftSubLang=result.language));let useLang=last?rightInSublang?rightSubLang:language:leftInSublang?leftSubLang:language;e.dataset.lang=useLang,text=hljs.highlight(text,{language:useLang}).value,usesSubLang&&result.found&&result.start&&(last?rightInSublang=!0:leftInSublang=!0),reset&&(last?rightSubLang="html":leftSubLang="html")}return e.dataset.text=cleanText,highlight?e.innerHTML=text:e.appendChild(document.createTextNode(text)),e},btelt=(name,clazz,text,cleanText="",last)=>{let e=document.createElement(name),result,reset=!1;if(e.className=clazz,highlight&&"texttitle"!==clazz){usesSubLang&&(result=checkForSubLang(text,language,last),result.found&&("inlinephp"===result.language?(reset=!0,last?rightSubLang="php":leftSubLang="php"):last?rightSubLang=result.language:leftSubLang=result.language));let useLang=last?rightInSublang?rightSubLang:language:leftInSublang?leftSubLang:language;e.dataset.lang=useLang,text=(text=hljs.highlight(text,{language:useLang}).value).replace(/TATTUDIFFINSSTART/gm,'<span class="ins">').replace(/(TATTUDIFFINSEND|TATTUDIFFDELLEND)/gm,"</span>").replace(/TATTUDIFFDELLSTART/gm,'<span class="dell">'),usesSubLang&&result.found&&result.start&&(last?rightInSublang=!0:leftInSublang=!0),reset&&(last?rightSubLang="html":leftSubLang="html")}return e.dataset.text=cleanText,e.innerHTML=text,e},checkForSubLang=(text,lang,last)=>{let found=!1,language="",start;switch(lang){case"html":if(!last&&leftInSublang||last&&rightInSublang){let result;HTMLSubLangEnd(text).found&&(found=!0,start=!1,last?rightInSublang=!1:leftInSublang=!1)}else{let result=HTMLSubLangStart(text);result.found&&(found=!0,language=result.language,start=!0)}break;case"php":if(!last&&leftInSublang||last&&rightInSublang){let result=PHPSubLangEnd(text,last);result.found&&(found=!0,start=!1,language=result.language,result.clear&&(last?rightInSublang=!1:leftInSublang=!1))}else{let result=PHPSubLangStart(text,last);result.found&&(found=!0,language=result.language,start=!0)}}return{found:found,language:language,start:start}},HTMLSubLangStart=text=>{let found=!1,language="";return text.includes("<style")&&(found=!0,language="css"),text.includes("<script")&&!text.includes("</script")&&(found=!0,language="javascript"),{found:found,language:language}},HTMLSubLangEnd=text=>{let found=!1,language="";return text.includes("</style>")&&(found=!0,language="css"),text.includes("<\/script>")&&(found=!0,language="javascript"),{found:found,language:language}},PHPSubLangStart=(text,last)=>{let found=!1,language="";return text.includes("?>")&&!text.includes("<?php")&&(found=!0,language="html",last?rightInHTML=!0:leftInHTML=!0),{found:found,language:language}},PHPSubLangEnd=(text,last)=>{let found=!1,language="",clearSubLang=!1;return text.includes("<?php")&&!text.includes("?>")&&(found=!0,language="php",last?rightInHTML=!1:leftInHTML=!1,clearSubLang=!0),(last&&rightInHTML||!last&&leftInHTML)&&text.includes("<?php")&&text.includes("?>")&&(found=!0,language="inlinephp"),(last&&rightInHTML||!last&&leftInHTML)&&text.includes("<style")&&(found=!0,language="css"),(last&&rightInHTML||!last&&leftInHTML)&&text.includes("<script")&&!text.includes("</script")&&(found=!0,language="javascript"),(last&&rightInHTML||!last&&leftInHTML)&&text.includes("</style>")&&(found=!0,language="html"),(last&&rightInHTML||!last&&leftInHTML)&&text.includes("<\/script>")&&(found=!0,language="html"),{found:found,language:language,clear:clearSubLang}},tdata=document.createElement("thead"),node=document.createElement("tr");tdata.appendChild(node),node.appendChild(document.createElement("th")),node.appendChild(ctelt("th","texttitle",newTextName,"",!1)),node.appendChild(document.createElement("th")),node.appendChild(ctelt("th","texttitle",baseTextName,"",!0)),tdata=[tdata];let rows=[],node2,addCells=(row,tidx,tend,textLines,change,last)=>tidx<tend?(row.appendChild(telt("th",(tidx+1).toString())),row.appendChild(ctelt("td",change,textLines[tidx].replace(/\t/g,"    "),textLines[tidx],last)),tidx+1):(row.appendChild(document.createElement("th")),row.appendChild(celt("td","empty")),tidx),addCellsSpecial=(row,tidx,tend,widx,wend,change,sourceTxt,inlineDiff,last)=>{if(tidx<tend){last&&widx--;let inserted=0,deleted=0,output="";for(let e=0;e<inlineDiff.length;e++){let currDiff=inlineDiff[e];switch(currDiff[0]){case 0:output+=currDiff[1];break;case 1:last||(output=output+"TATTUDIFFINSSTART"+currDiff[1]+"TATTUDIFFINSEND",inserted++);break;case-1:last&&(output=output+"TATTUDIFFDELLSTART"+currDiff[1]+"TATTUDIFFDELLEND",deleted++)}}return inserted>0&&0===deleted?change="insert":deleted>0&&0===inserted&&(change="delete"),cleanText=output,row.appendChild(telt("th",(tidx+1).toString(),change)),row.appendChild(btelt("td",change,cleanText,sourceTxt,last)),tidx+1}return row.appendChild(document.createElement("th")),row.appendChild(celt("td","empty")),tidx};for(let idx=0;idx<opcodes.length;idx++){code=opcodes[idx],change=code[0];let b=code[3],be=code[4],n=code[1],ne=code[2],rowcnt=Math.max(be-b,ne-n),toprows=[],botrows=[];for(let i=0;i<rowcnt;i++){if(contextSize&&opcodes.length>1&&(idx>0&&i==contextSize||0==idx&&0==i)&&"equal"==change){let jump=rowcnt-(0==idx?1:2)*contextSize;if(jump>1){if(toprows.push(node=document.createElement("tr")),b+=jump,n+=jump,i+=jump-1,node.appendChild(telt("th","...")),node.appendChild(ctelt("td","skip","")),node.appendChild(telt("th","...")),node.appendChild(ctelt("td","skip","")),idx+1==opcodes.length)break;continue}}switch(toprows.push(node=document.createElement("tr")),change){case"insert":inserted++,node.classList.add("difference");break;case"replace":b<be&&n<ne?changed++:inserted++,node.classList.add("difference");break;case"delete":deleted++,node.classList.add("difference")}if("replace"==change)if(b<be&&n<ne){let cleanText=newTextLines[b].replace(/\t/g,"    "),diffText=baseTextLines[n].replace(/\t/g,"    "),inlineDiff=dmp.diff_main(diffText,cleanText);dmp.diff_cleanupSemantic(inlineDiff),b<be?leftLines.push(newTextLines[b]):leftLines.push("@empty@"),n<ne?rightLines.push(baseTextLines[n]):rightLines.push("@empty@"),b=addCellsSpecial(node,b,be,n,ne,change,newTextLines[b],inlineDiff,!1),n=addCellsSpecial(node,n,ne,b,be,change,baseTextLines[n],inlineDiff,!0)}else b<be?leftLines.push(newTextLines[b]):leftLines.push("@empty@"),n<ne?rightLines.push(baseTextLines[n]):rightLines.push("@empty@"),b=addCells(node,b,be,newTextLines,"insert",!1),n=addCells(node,n,ne,baseTextLines,change,!0);else b<be?leftLines.push(newTextLines[b]):leftLines.push("@empty@"),n<ne?rightLines.push(baseTextLines[n]):rightLines.push("@empty@"),b=addCells(node,b,be,newTextLines,change,!1),n=addCells(node,n,ne,baseTextLines,change,!0)}for(let i=0;i<toprows.length;i++)rows.push(toprows[i]);for(let i=0;i<botrows.length;i++)rows.push(botrows[i])}mergeResult=[...rightLines],insertC.innerHTML=inserted,changedC.innerHTML=changed,deletedC.innerHTML=deleted,0===inserted&&0===changed&&0===deleted&&(window.NO_CHANGES=!0),tdata.push(node=document.createElement("tbody"));for(let idx in rows)rows.hasOwnProperty(idx)&&node.appendChild(rows[idx]);node=celt("table","diff","diff");for(let idx in tdata)tdata.hasOwnProperty(idx)&&node.appendChild(tdata[idx]);return node}};